---
- name: Create semaphore user
  ansible.builtin.user:
    name: "{{ semaphore_container_user }}"
    shell: /sbin/nologin
    create_home: true
    state: present
  become: true

- name: Get created user metadata
  ansible.builtin.getent:
    database: passwd
    key: "{{ semaphore_container_user }}"

- name: Setting user id and group id facts
  ansible.builtin.set_fact:
    created_uid: "{{ ansible_facts.getent_passwd[semaphore_container_user].1 }}"
    created_gid: "{{ ansible_facts.getent_passwd[semaphore_container_user].2 }}"

- name: Ensure semaphore folders exists
  become: true
  ansible.builtin.file:
    dest: "{{ item }}"
    owner: "{{ semaphore_container_user }}"
    group: "{{ semaphore_container_user }}"
    state: directory
    mode: 0777
  loop:
    - "{{ semaphore_host_config_path }}"

- name: Ensure semaphore db folder exists
  become: true
  ansible.builtin.file:
    dest: "{{ item }}"
    owner: "{{ semaphore_container_user }}"
    group: "{{ semaphore_container_user }}"
    state: directory
    mode: 0700
  loop:
    - "{{ semaphore_host_db_path }}"

- name: Copy semaphore docker-compose template.
  ansible.builtin.template:
    src: templates/docker-compose.yml.j2
    dest: "{{ semaphore_host_config_path }}/docker-compose.yml"
    owner: "{{ semaphore_container_user }}"
    group: "{{ semaphore_container_user }}"
    mode: 0644
  become: true

- name: Create systemd semaphore service.
  ansible.builtin.template:
    src: templates/semaphore.service.j2
    dest: "/etc/systemd/system/semaphore.service"
    mode: 0644
  become: true

- name: Ensure semaphore.service is started
  ansible.builtin.systemd:
    state: started
    enabled: true
    name: semaphore
  become: true

- name: Check semaphore container
  ansible.builtin.uri:
    url: "http://localhost:{{ semaphore_ui_host_port }}"
    status_code: [200, 401]
  register: result
  until: result.status == 200 or result.status == 401
  retries: 5
  delay: 60

- name: Remove old image versions
  become: true
  community.docker.docker_prune:
    images: true
    images_filters:
      dangling: false
  notify: Restart Docker service
